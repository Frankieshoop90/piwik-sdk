{
  "name": "Piwik-sdk",
  "tagline": "SDK for Android to measure your apps with Piwik",
  "body": "Piwik SDK for Android\r\n========================\r\n\r\n[![Build Status](https://travis-ci.org/piwik/piwik-sdk-android.svg?branch=master)](https://travis-ci.org/piwik/piwik-sdk-android) [ ![Download](https://api.bintray.com/packages/darken/maven/piwik-sdk-android/images/download.svg) ](https://bintray.com/darken/maven/piwik-sdk-android/_latestVersion) [![Coverage Status](https://coveralls.io/repos/piwik/piwik-sdk-android/badge.svg?branch=master&service=github)](https://coveralls.io/github/piwik/piwik-sdk-android?branch=master)\r\n\r\nThis document describes how to get started using the Piwik Tracking SDK for Android. \r\n[Piwik](http://piwik.org) is the leading open source web analytics platform \r\nthat gives you valuable insights into your website's visitors, \r\nyour marketing campaigns and much more, so you can optimize your strategy and experience of your visitors.\r\n\r\n## Getting started\r\n\r\nIntegrating Piwik into your Android app\r\n \r\n1. [Install Piwik](http://piwik.org/docs/installation/)\r\n2. [Create a new website in the Piwik web interface](http://piwik.org/docs/manage-websites/). Copy the Website ID from \"Settings > Websites\".\r\n3. [Include the library](#include-library)\r\n4. [Initialize Tracker](#initialize-tracker).\r\n5. [Track screen views, exceptions, goals and more](#tracker-usage).\r\n6. [Advanced tracker usage](#advanced-tracker-usage)\r\n\r\n\r\n### Include library\r\nAdd this to your apps build.gradle file:\r\n\r\n```groovy\r\ndependencies {\r\n    repositories {\r\n        jcenter()\r\n    }\r\n    // ...\r\n    compile 'org.piwik.sdk:piwik-sdk:1.0.2'\r\n}\r\n```\r\n\r\n\r\n### Initialize Tracker\r\n\r\n#### Basic\r\n\r\nYou can simply extend your application with a \r\n[``PiwikApplication``](https://github.com/piwik/piwik-sdk-android/blob/master/piwik-sdk/src/main/java/org/piwik/sdk/PiwikApplication.java) class.\r\n[This approach is used](https://github.com/piwik/piwik-sdk-android/blob/master/exampleapp/src/main/java/com/piwik/demo/DemoApp.java) in our demo app.\r\n\r\n#### Advanced\r\n\r\nDevelopers could manage the tracker lifecycle by themselves.\r\nTo ensure that the metrics are not over-counted, it is highly \r\nrecommended that the tracker be created and managed in the Application class.\r\n\r\n```java\r\n\r\nimport java.net.MalformedURLException;\r\n\r\npublic class YourApplication extends Application {\r\n    private Tracker mPiwikTracker;\r\n\r\n    public synchronized Tracker getTracker() {\r\n        if (mPiwikTracker != null) {\r\n            return mPiwikTracker;\r\n        }\r\n\r\n        try {\r\n            mPiwikTracker = Piwik.getInstance(this).newTracker(\"http://your-piwik-domain.tld/piwik.php\", 1);\r\n        } catch (MalformedURLException e) {\r\n            Log.w(Tracker.LOGGER_TAG, \"url is malformed\", e);\r\n            return null;\r\n        }\r\n\r\n        return piwikTracker;\r\n    }\r\n    //...\r\n}\r\n```\r\n\r\nDon't forget to add application name to your `AndroidManifest.xml` file.\r\n \r\n```xml\r\n\r\n    <application android:name=\".YourApplication\">\r\n        <!-- activities goes here -->\r\n    </application>\r\n```\r\n\r\n\r\n### Tracker Usage\r\n\r\n#### Track screen views\r\n\r\nTo send a screen view set the screen path and titles on the tracker\r\n\r\n```java\r\n\r\npublic class YourActivity extends Activity {\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n        Tracker tracker = ((PiwikApplication) getApplication()).getTracker();\r\n        TrackHelper.track().screen(\"/your_activity\").title(\"Title\").with(tracker);\r\n    }\r\n}\r\n```\r\n\r\n#### Track events\r\n\r\nTo collect data about user's interaction with interactive components of your app, like button presses or the use of a particular item in a game \r\nuse [trackEvent](http://piwik.github.io/piwik-sdk-android/org/piwik/sdk/Tracker.html#trackEvent(java.lang.String, java.lang.String, java.lang.String, java.lang.Integer)) \r\nmethod.\r\n\r\n```java\r\n\r\nTrackHelper.track().event(\"category\", \"action\").name(\"label\").value(1000f).with(tracker);\r\n```\r\n\r\n#### Track goals\r\n\r\nIf you want to trigger a conversion manually or track some user interaction simply call the method \r\n[trackGoal](http://piwik.github.io/piwik-sdk-android/org/piwik/sdk/Tracker.html#trackGoal(java.lang.Integer)).\r\nRead more about what is a [Goal in Piwik](http://piwik.org/docs/tracking-goals-web-analytics/).\r\n\r\n```java\r\n\r\nTrackHelper.track().goal(1).revenue(revenue).with(tracker)\r\n```\r\n\r\n#### Track custom vars\r\n\r\nTo track a custom name-value pair assigned to your users or screen views use \r\n[setVisitCustomVariable](http://piwik.github.io/piwik-sdk-android/org/piwik/sdk/Tracker.html#setVisitCustomVariable(int, java.lang.String, java.lang.String))\r\nand\r\n[setScreenCustomVariable](http://piwik.github.io/piwik-sdk-android/org/piwik/sdk/TrackMe.html#setScreenCustomVariable(int, java.lang.String, java.lang.String))\r\nmethods. Those methods have to be called before a call to [trackScreenView](#track-screen-views).\r\nMore about [custom variables on piwik.org](http://piwik.org/docs/custom-variables/).\r\n\r\n\r\n```java\r\n\r\nTracker tracker = ((PiwikApplication) getApplication()).getTracker();\r\ntracker.setVisitCustomVariable(2, \"Age\", \"99\");\r\nTrackHelper.track().screen(\"/path\").variable(2, \"Price\", \"0.99\").with(tracker);\r\n```\r\n\r\n#### Track application downloads\r\n\r\nTo track the number of app downloads you may call the method [``trackAppDownload``](http://piwik.github.io/piwik-sdk-android/org/piwik/sdk/Tracker.html#trackAppDownload())\r\nThis method uses ``SharedPreferences`` to ensures that tracking application downloading will be fired only once.\r\n\r\n```java\r\n\r\nTrackHelper.track().download().with(tracker);\r\n```\r\n\r\n#### Custom Dimensions\r\nTo track [Custom Dimensions](https://plugins.piwik.org/CustomDimensions) in scope Action or Visit\r\nconsider following example:\r\n\r\n```java\r\n\r\nTracker tracker = ((YourApplication) getApplication()).getTracker();\r\ntracker.track(\r\n    new CustomDimensions()\r\n        .set(1, \"foo\")\r\n        .set(2, \"bar\")\r\n);\r\n```\r\n\r\n#### Ecommerce\r\n\r\nPiwik provides ecommerce analytics that let you measure items added to carts,\r\nand learn detailed metrics about abandoned carts and purchased orders.\r\n\r\nTo track an Ecommerce order use `trackEcommerceOrder` method.\r\n`orderId` and `grandTotal` (ie. revenue) are required parameters.\r\n\r\n```java\r\n\r\nTracker tracker = ((YourApplication) getApplication()).getTracker();\r\nEcommerceItems items = new EcommerceItems();\r\nitems.addItem(new EcommerceItems.Item(\"sku\").name(\"product\").category(\"category\").price(200).quantity(2));\r\nitems.addItem(new EcommerceItems.Item(\"sku\").name(\"product2\").category(\"category2\").price(400).quantity(3));\r\n\r\nTrackHelper.track().order(\"orderId\", 10000).subTotal(7000).tax(2000).shipping(1000).discount(0).items(items).with(tracker);\r\n```\r\n\r\n### Advanced tracker usage\r\n\r\n#### Custom queries\r\n\r\nThe base method for any event is\r\n[track](http://piwik.github.io/piwik-sdk-android/org/piwik/sdk/Tracker.html#track(org.piwik.sdk.TrackMe))\r\nYou can create your own objects, set the parameters and send it along.\r\n```java\r\nTrackMe trackMe = new TrackMe()\r\ntrackMe.set...\r\n/* ... */\r\nTracker tracker = ((YourApplication) getApplication()).getTracker();\r\ntracker.track(trackMe);\r\n```\r\n\r\n#### Dispatching\r\n\r\nThe tracker by default will dispatch any pending events every 120 seconds.\r\n\r\nIf a negative value is used the dispatch timer will never run, a manual dispatch must be used:\r\n\r\n```java\r\n        \r\n    Tracker tracker = ((YourApplication) getApplication()).getTracker();\r\n    tracker.setDispatchInterval(-1);\r\n    // Track exception\r\n    try {\r\n        revenue = getRevenue();\r\n    } catch (Exception e) {\r\n        tracker.trackException(e, e.getMessage(), false);\r\n        tracker.dispatch();\r\n        revenue = 0;\r\n    }\r\n    \r\n```\r\n\r\n#### User ID\r\n\r\nProviding the tracker with a user ID lets you connect data collected from multiple devices and multiple browsers for the same user. \r\nA user ID is typically a non empty string such as username, email address or UUID that uniquely identifies the user. \r\nThe User ID must be the same for a given user across all her devices and browsers.\r\n\r\n```java\r\n\r\n        ((YourApplication) getApplication()).getTracker()\r\n                .setUserId(\"user@email.com\");\r\n```\r\n\r\nIf user ID is used, it must be persisted locally by the app and set directly on the tracker each time the app is started. \r\n\r\nIf no user ID is used, the SDK will generate, manage and persist a random id for you.\r\n\r\n#### Modifying default parameters\r\n\r\nThe Tracker has a method\r\n[getDefaultTrackMe](http://piwik.github.io/piwik-sdk-android/org/piwik/sdk/Tracker.html#getDefaultTrackMe())\r\nmodifying the object returned by it will change the default values used on each query.\r\nNote though that the Tracker will not overwrite any values you set on your own TrackMe object.\r\n\r\n#### Detailed API documentation\r\n\r\nHere is the design document written by Thomas to give a brief overview of the SDK project: https://github.com/piwik/piwik-android-sdk/wiki/Design-document\r\n\r\nPiwik SDK should work fine with Android API Version >= 10 (Android 2.3.3+)\r\n\r\nOptional [``autoBindActivities``](https://github.com/piwik/piwik-sdk-android/blob/master/piwik-sdk/src/main/java/org/piwik/sdk/QuickTrack.java)\r\n method is available on API level >= 14.\r\n\r\nCheck out the full [API documentation](http://piwik.github.io/piwik-sdk-android/).\r\n\r\n#### Debugging\r\n\r\nPiwik uses [Timber](https://github.com/JakeWharton/timber).\r\nIf you don't use Timber in your own app call `Timber.plant(new Timber.DebugTree());`, if you do use Timber in your app then Piwik should automatically participate in your logging efforts.\r\nFor more information see [Timbers GitHub](https://github.com/JakeWharton/timber)\r\n\r\n### Check SDK\r\n\r\nFollowing command will clean, build, test, generate documentation, do coverage reports and then create a jar.\r\n\r\n```\r\n$ ./gradlew :piwik-sdk:clean :piwik-sdk:assemble :piwik-sdk:test :piwik-sdk:jacocoTestReport :piwik-sdk:generateReleaseJavadoc :piwik-sdk:coveralls --info :piwik-sdk:makeJar\r\n```\r\n\r\n\r\n* Coverage output _./piwik-sdk/build/reports/jacoco/jacocoTestReport/html/index.html_\r\n* Tests report _./piwik-sdk/build/test-report/debug/index.html_\r\n* Javadoc _./piwik-sdk/build/docs/javadoc/index.html_\r\n\r\n## Demo application\r\n\r\nBrowse [the code](https://github.com/piwik/piwik-sdk-android/tree/master/exampleapp) or\r\nbuild  an .apk by running following command:\r\n\r\n```bash\r\n./gradlew :exampleapp:clean :exampleapp:build\r\n```\r\nGenerated .apk would be placed in  ``./exampleapp/build/apk/`\r\n\r\n\r\n\r\n## Contribute\r\n\r\n* Fork the project\r\n* Create a feature branch based on the 'dev' branch\r\n* Drink coffee and develop an awesome new feature\r\n* Add tests for your new feature\r\n* Make sure that everything still works by running \"./gradlew clean assemble test\".\r\n* Commit & push the changes to your repo\r\n* Create a pull request from your feature branch against the dev branch of the original repo\r\n* Explain your changes, we can see what changed, but tell us why.\r\n* If your PR passes the travis-ci build and has no merge conflicts, just wait, otherwise fix the code first.\r\n\r\n## License\r\n\r\nAndroid SDK for Piwik is released under the BSD-3 Clause license, see [LICENSE](https://github.com/piwik/piwik-sdk-android/blob/master/LICENSE).\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}